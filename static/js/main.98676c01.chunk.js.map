{"version":3,"sources":["Components/Reusable/Button.jsx","Components/Reusable/ModalForm.jsx","Components/Reusable/MoviePosterCard.jsx","Components/Reusable/MovieMetaData.jsx","Components/MovieList.jsx","APIKey.js","Components/Reusable/MovieSearchBar.jsx","Components/Reusable/CardSkeleton.jsx","Components/Search.jsx","Components/Reusable/BarGraph.jsx","Components/Reusable/MovieDetailsCard.jsx","Components/Reusable/MovieChip.jsx","Components/MovieGrid.jsx","Pages/MovieComparePage.jsx","Components/errorBoundaryHandler.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","text","size","color","variant","onClick","other","DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","palette","grey","props","children","classes","onClose","disableTypography","className","Typography","Tooltip","title","placement","arrow","IconButton","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","ModalForm","enableSaveButton","isopen","maxWidth","header","toggle","savefunc","SaveButton","React","useState","open","setOpen","useEffect","document","body","style","overflow","Dialog","fullWidth","id","dividers","gutterBottom","type","useStyles","makeStyles","display","flexWrap","justifyContent","backgroundColor","background","paper","width","primary","light","titleBar","actionIcon","MovieImageItem","postersrc","rating","index","deleteItemFromGrid","customClick","draggableId","provided","ImageListItem","component","Paper","draggableProps","dragHandleProps","innerRef","src","alt","height","ImageListItemBar","ItemTitle","Rating","value","precision","readOnly","media","paddingTop","alignContent","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","MovieMetaData","movie","Title","Year","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Country","Awards","Poster","Ratings","Metascore","imdbRating","imdbVotes","Type","DVD","BoxOffice","Production","Website","Response","Card","CardHeader","subheader","HeaderSubtitle","action","Box","flexDirection","votes","source","CardMedia","image","CardContent","split","map","el","Chip","disabled","label","paragraph","Divider","CollapsibleArea","Grid","container","direction","alignItems","Value","Source","Skeleton","useAccordianStyles","fontSize","heading","fontWeight","typography","fontWeightRegular","Accordion","AccordionSummary","expandIcon","AccordionDetails","RatingCard","imageList","isDraggingOver","borderRadius","MovieList","columnId","movies","scrollingListRef","useRef","openModal","setOpenModal","movieData","setMovieData","deleteFromGrid","item","handleScrollButtonOnClick","offset","scrollByVal","current","scrollWidth","window","innerWidth","scroll","left","scrollLeft","behavior","droppableId","snapshot","elevation","ref","droppableProps","length","ArrowBackIos","ImageList","cols","gap","imdbID","placeholder","ArrowForwardIos","APIKey","SearchBar","movieDisplay","options","setOptions","noOptionsText","setNoOptionsText","loading","handleSearchChange","a","axios","get","response","data","responseData","Search","Error","Autocomplete","onOpen","freeSolo","openOnFocus","getOptionSelected","option","getOptionLabel","onChange","event","newValue","renderInput","params","TextField","e","target","InputProps","endAdornment","Fragment","CircularProgress","avatar","MovieMetaDataSkeleton","SearchComponent","sendMovieData","setMovieDisplay","fetchInProgress","setFetchInProgress","JSON","stringify","MovieBarGraph","isLargeScreen","ratings","setRatings","keys","imdbValues","isNaN","indexBy","groupMode","colorBy","colors","scheme","initialHiddenIds","slice","axis","legend","domain","line","strokeWidth","stroke","layout","enableGridX","enableGridY","enableLabel","minValue","maxValue","d","labelSkipHeight","bottom","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","legendLabel","datum","axisLeft","format","acronym","reduce","word","legends","anchor","dataFrom","itemHeight","itemWidth","translateY","translateX","symbolShape","CustomSymbolShape","tooltip","x","y","fill","borderWidth","borderColor","pointerEvents","flexGrow","img","marginTop","marginRight","zIndex","maxHeight","MovieCard","CloseOutlined","Hidden","smDown","xs","sm","md","lg","xl","ButtonBase","xlUp","lgDown","MovieChip","deleteItem","onDelete","clickable","list","isDesktop","listPaper","MovieGrid","setDesktop","displayMovie","setDisplayMovie","updateMedia","addEventListener","removeEventListener","itemId","showMovie","List","Container","MoviePage","state","errorMsg","showError","columns","columnOrder","bind","onAddClick","onSaveClick","onDragEnd","receiveMovieData","deleteFromList","this","colMovies","newState","filter","setState","prevstate","prevState","moviesData","findIndex","result","destination","start","finish","startMovies","Array","from","splice","newStart","finishMovies","newFinish","newMovies","newColumn","Snackbar","autoHideDuration","message","anchorOrigin","vertical","horizontal","column","find","startIcon","Component","errorBoundaryHandler","error","Alert","severity","stack","App","FallbackComponent","AppBar","Toolbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.98676c01.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button as MuiButton} from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n *\r\n *\r\n * @param {Object} props {text, size, color, variant, onClick, ...other}\r\n * @param {string} props.text text value to be passed to component display\r\n * @param {string} props.size size of the button to be rendered\r\n * @param {string} props.color color of the button\r\n * @param {string} props.variant type of the button to render\r\n * @param {function} props.onClick functionality to be triggered on onClick\r\n * @param {any}  props.other any other additional parameters you want to pass\r\n * @return {ReactNode} reusable button\r\n */\r\nfunction Button({text, size, color, variant, onClick, ...other}) {\r\n  return (\r\n    <MuiButton\r\n      size={size || 'large'}\r\n      color={color || 'primary'}\r\n      variant={variant || 'contained'}\r\n      onClick={onClick}\r\n      {...other}\r\n    >\r\n      {text}\r\n    </MuiButton>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  size: PropTypes.string,\r\n  color: PropTypes.string,\r\n  variant: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  other: PropTypes.any,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Tooltip} from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const {children, classes, onClose, ...other} = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n                <Tooltip title=\"Close this window\" placement=\"left\" arrow>\r\n                  <IconButton\r\n                    aria-label=\"close\"\r\n                    className={classes.closeButton}\r\n                    onClick={onClose}\r\n                  >\r\n                    <CloseIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n            ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n/**\r\n * Renders the modal form component\r\n * @param {Object} props {children,enableSaveButton,isopen,maxWidth,header,\r\n * toggle,savefunc,SaveButton=,...other}\r\n * @param {JSXElement} props.children Children to render inside modal body\r\n * @param {boolean} [props.enableSaveButton=true]  enable save button in Modal\r\n * @param {boolean} props.isopen show the modal\r\n * @param {string/bool} props.maxWidth maximum width of the modal to render\r\n * @param {string} props.header header/title of the modal\r\n * @param {function} props.toggle function on toggling the modal (open/close)\r\n * @param {function} props.SaveFunction function to call on save\r\n * @param {string} props.SaveButton text in save button\r\n * @param {any} props.other any other additional parameters you want to pass\r\n * @return {ReactNode} Modal form component\r\n */\r\nfunction ModalForm({\r\n  children,\r\n  enableSaveButton = true,\r\n  isopen,\r\n  maxWidth,\r\n  header,\r\n  toggle,\r\n  savefunc,\r\n  SaveButton='Save',\r\n  ...other\r\n}) {\r\n  const [open, setOpen] = React.useState(isopen);\r\n  React.useEffect(() => {\r\n    setOpen(isopen);\r\n  }, [isopen]);\r\n\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      document.body.style.overflow = 'scroll';\r\n    } else {\r\n      document.body.style.overflow = 'auto';\r\n    }\r\n    return () => {\r\n      document.body.style.overflow = 'auto';\r\n    };\r\n  }, [open]);\r\n\r\n  const handleToggle = () => {\r\n    setOpen(!open);\r\n\r\n    if (toggle) toggle();\r\n  };\r\n  const save = () => {\r\n    savefunc();\r\n  };\r\n  return (\r\n    <Dialog\r\n      {...other}\r\n      aria-labelledby=\"customized-dialog-title\"\r\n      open={open}\r\n      maxWidth={maxWidth || 'md'}\r\n      fullWidth= {true}\r\n    >\r\n      <DialogTitle id=\"customized-dialog-title\" onClose={handleToggle}>\r\n        {header}\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n        <Typography gutterBottom>{children}</Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        {enableSaveButton ? (\r\n                    <Tooltip title=\"Save the changes\" placement=\"left\" arrow>\r\n                      <Button type=\"button\" onClick={save} color=\"primary\">\r\n                        {SaveButton}\r\n                      </Button>\r\n                    </Tooltip>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nModalForm.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n  enableSaveButton: PropTypes.bool,\r\n  isopen: PropTypes.bool.isRequired,\r\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n  header: PropTypes.string,\r\n  savefunc: PropTypes.func,\r\n  toggle: PropTypes.func,\r\n  SaveButton: PropTypes.string,\r\n  other: PropTypes.any,\r\n};\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport ImageListItem from '@material-ui/core/ImageListItem';\r\nimport ImageListItemBar from '@material-ui/core/ImageListItemBar';\r\nimport {Rating} from '@material-ui/lab';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport {Close} from '@material-ui/icons';\r\nimport {IconButton, Paper} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: '70vw',\r\n    margin: 10,\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n  titleBar: {\r\n    background:\r\n      // eslint-disable-next-line max-len\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n  actionIcon: {\r\n    color: 'white',\r\n  },\r\n}));\r\n\r\n/**\r\n * Returns list item of movie object for horizontally scrollable list\r\n * @param {Object} props {title, postersrc, rating,\r\n *   id, index, deleteItemFromGrid, customClick}\r\n * @param {string} props.title Movie title\r\n * @param {string} props.postersrc url of the src of the poster of the movie\r\n * @param {string/number} props.rating rating of the movie\r\n * @param {string/number} props.id imdb id of the movie to uniquely identify it\r\n * @param {any} props.index unique index of the item in the dragdropcontext\r\n * @param {function} props.deleteItemFromGrid callback to delete the item from\r\n * the list grid\r\n * @param {function} props.customClick callback to onclick function to display\r\n * movie meta on clicking movie\r\n * @return {ReactNode} HorizontalScrollList Component that allows\r\n * list of children to be horizontally scrollable.\r\n */\r\nfunction MovieImageItem({title, postersrc, rating,\r\n  id, index, deleteItemFromGrid, customClick}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {(provided)=>(\r\n        <ImageListItem\r\n          component={Paper}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          innerRef={provided.innerRef}>\r\n          <img src={postersrc} alt={title} height={'100%'}\r\n            onClick={customClick}/>\r\n          <ImageListItemBar\r\n            title= {<ItemTitle title={title} rating={rating/2}/>}\r\n            classes={{\r\n              root: classes.titleBar,\r\n            }}\r\n            position='top'\r\n            actionIcon={<IconButton className={classes.actionIcon}\r\n              onClick={()=>{\r\n                deleteItemFromGrid(id);\r\n              }}>\r\n              <Close/>\r\n            </IconButton>}\r\n          />\r\n        </ImageListItem>)}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nMovieImageItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  postersrc: PropTypes.string.isRequired,\r\n  rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  index: PropTypes.any.isRequired,\r\n  deleteItemFromGrid: PropTypes.func.isRequired,\r\n  customClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MovieImageItem;\r\n/**\r\n * Movie card title\r\n * @param {Object} props {title, rating}\r\n * @param {string} props.title title of the card to be returned\r\n * @param {string/number} props.rating rating of the movie\r\n * @return {ReactNode} title for the image\r\n */\r\nfunction ItemTitle({title, rating}) {\r\n  return (<>\r\n    {title}\r\n    <br/>\r\n    <Rating value={rating} precision={0.1} size='small'\r\n      readOnly/>\r\n  </>);\r\n}\r\n\r\nItemTitle.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.any,\r\n};\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport PropTypes from 'prop-types';\r\nimport {Box, Chip, Divider, Grid} from '@material-ui/core';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Star from '@material-ui/icons/Star';\r\nimport {Skeleton} from '@material-ui/lab';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: '80%',\r\n    margin: '10%',\r\n  },\r\n  media: {\r\n    maxWidth: '80%',\r\n    height: '80%',\r\n    paddingTop: '100%',\r\n    margin: '10%',\r\n    alignContent: 'center',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n}));\r\n/**\r\n * Movie Meta data display element to display the movie data in modal\r\n * @param {Array} movie object passed to render metadata\r\n * @return {ReactNode} MovieMetaData movie details display element\r\n */\r\nfunction MovieMetaData({movie}) {\r\n  const classes = useStyles();\r\n  const {Title, Year, Rated, Released, Runtime, Genre, Director,\r\n    Writer, Actors, Plot, Country, Awards, Poster, Ratings, Metascore,\r\n    imdbRating, imdbVotes, Type, DVD, BoxOffice, Production,\r\n    Website, Response} = movie;\r\n\r\n  return (\r\n    Response?\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        title={Title}\r\n        subheader={<HeaderSubtitle Year={Year} Rated={Rated}\r\n          Runtime={Runtime} Type={Type}/>}\r\n        action={ <Box display='flex' flexDirection='row'>\r\n          {imdbRating!=='N/A'? <RatingCard votes={imdbVotes} rating={imdbRating}\r\n            source={'IMDb score'} width='100%'/>:<></>}\r\n          {Metascore!=='N/A'?<RatingCard rating={Metascore}\r\n            source={'MetaScore'} width='100%'/>:<></>}</Box>}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={Poster}\r\n        title={Title}\r\n      />\r\n      <CardContent>\r\n        <Box display='flex' flexDirection='row'>\r\n          {Genre.split(',')?.map((el) => (<Chip variant='outlined' disabled\r\n            label={el}\r\n            key={el} />))}\r\n        </Box>\r\n        <Typography paragraph>\r\n          {Plot}\r\n        </Typography>\r\n        <Divider variant = 'fullWidth' />\r\n        <Typography paragraph>\r\n          <br/>\r\n          <b>Director </b>  {Director}\r\n        </Typography>\r\n        <Divider variant = 'fullWidth' />\r\n        <Typography paragraph>\r\n          <br/>\r\n          <b>Writer </b> {Writer.split(',')?.map((el) => (el))}\r\n        </Typography>\r\n        <Divider variant = 'fullWidth' />\r\n        <Typography paragraph>\r\n          <br/>\r\n          <b>Stars </b> {Actors.split(',')?.map((el) => (el))}\r\n        </Typography>\r\n        <Divider variant = 'fullWidth' />\r\n      </CardContent>\r\n      <CollapsibleArea title='Details'>\r\n        <b>Release Date </b> {Released}\r\n        <Divider variant='fullWidth'/>\r\n        <b>Countries of Origin </b> {Country?.split(',')?.map((el) => (el))}\r\n        <Divider variant='fullWidth'/>\r\n        <b>Official Websites </b> {Website?.split(',')?.map((el)=>(el))}\r\n        <Divider variant='fullWidth'/>\r\n        <b>Production Companies</b> {Production?.split(',')?.map((el)=>(el))}\r\n        <Divider variant='fullWidth'/>\r\n        <b>Box Office </b> {BoxOffice}\r\n        <Divider variant='fullWidth'/>\r\n        <b>Awards </b> {Awards}\r\n        <Divider variant='fullWidth'/>\r\n        <b>DVD Release</b> {DVD}\r\n      </CollapsibleArea>\r\n      <CollapsibleArea title = 'Ratings'>\r\n        <Grid container direction='row' alignItems='center'>\r\n          <Box display='flex' flexDirection='row'>\r\n            {Ratings?.map((rating)=>\r\n              <RatingCard key={rating.Source} rating={rating.Value}\r\n                source={rating.Source}/>)}\r\n          </Box>\r\n        </Grid>\r\n      </CollapsibleArea>\r\n    </Card>: <Skeleton/>\r\n  );\r\n}\r\nMovieMetaData.propTypes = {\r\n  movie: PropTypes.object,\r\n};\r\nexport default MovieMetaData;\r\n\r\n/**\r\n * Returns header element\r\n *  @param {Object} props {Year, Rated, Runtime, Type}\r\n * @param {string/number} props.Year Year of release\r\n * @param {string/number} props.Rating Rating of the movie\r\n * @param {string/number} props.Runtime length of the movie\r\n * @param {string} props.type determines if movie, TV show or short film\r\n * @return {ReactNode} subtitle\r\n */\r\nfunction HeaderSubtitle({Year, Rated, Runtime, Type}) {\r\n  return (<>\r\n    <Chip variant='outlined' disabled label={Year}/>\r\n    <Chip variant='outlined' disabled label={Rated}/>\r\n    <Chip variant='outlined' disabled label={Runtime}/>\r\n    <Chip variant='outlined' disabled label={Type}/>\r\n  </>);\r\n}\r\n\r\nHeaderSubtitle.propTypes = {\r\n  Year: PropTypes.string,\r\n  Rated: PropTypes.string,\r\n  Runtime: PropTypes.string,\r\n  Type: PropTypes.string,\r\n};\r\n\r\nconst useAccordianStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    display: 'block',\r\n    fontSize: '1.1em',\r\n  },\r\n  heading: {\r\n    fontSize: '1vw',\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n/**\r\n * Accordian Component\r\n * @param {Object} props {title, children}\r\n * @param {string} props.title of the collapsible area\r\n * @param {JSXElements} props.Children to the accordian\r\n * @return {ReactNode} Accordian component\r\n */\r\nfunction CollapsibleArea({title, children}) {\r\n  const classes = useAccordianStyles();\r\n  return (<div className={classes.root}>\r\n    <Accordion>\r\n      <AccordionSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Typography className={classes.heading}><b>{title}</b></Typography>\r\n      </AccordionSummary>\r\n      <AccordionDetails className={classes.root}>\r\n        {children}\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  </div>);\r\n}\r\n\r\nCollapsibleArea.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nconst RatingCard = ({rating, source, votes, width}) => {\r\n  return (<Card style={{maxWidth: width}}>\r\n    <CardContent>\r\n      <Star/> {rating}\r\n      <br/>\r\n      {votes?<i>{votes}</i>:<></>}\r\n      <br/>\r\n      {source}\r\n    </CardContent>\r\n  </Card>);\r\n};\r\n\r\nRatingCard.propTypes = {\r\n  rating: PropTypes.string.isRequired,\r\n  source: PropTypes.string.isRequired,\r\n  votes: PropTypes.string,\r\n  width: PropTypes.string,\r\n};\r\n","\r\n\r\nimport React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Droppable} from 'react-beautiful-dnd';\r\nimport {Button, Grid, Paper} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport ImageList from '@material-ui/core/ImageList';\r\nimport MovieImageItem from './Reusable/MoviePosterCard';\r\nimport {useRef} from 'react';\r\nimport {ArrowBackIos, ArrowForwardIos} from '@material-ui/icons';\r\nimport ModalForm from './Reusable/ModalForm';\r\nimport MovieMetaData from './Reusable/MovieMetaData';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: '100vw',\r\n  },\r\n  imageList: {\r\n    flexWrap: 'nowrap',\r\n  },\r\n  paper: {\r\n    backgroundColor: (props) => props.isDraggingOver? 'lightgray':'#f8f9fa',\r\n    width: '70vw',\r\n    height: '30vh',\r\n    justifyContent: 'center',\r\n    padding: 20,\r\n    display: 'flex',\r\n    borderRadius: 8,\r\n  },\r\n}));\r\n/**\r\n * Renders movies which have been added to be picked to compare\r\n * @param {Object} props {deleteItemFromGrid, columnId, movies}\r\n * @param {function} props.deleteItemFromGrid:callback to delete movie from grid\r\n * @param {Array} props.movies of the movie objects to be rendered in list\r\n * @param {string/number} props.columnId to uniquely identify the droppable area\r\n * @return {ReactNode} returns movie list component\r\n */\r\nfunction MovieList({deleteItemFromGrid, columnId, movies}) {\r\n  const classes = useStyles();\r\n  const scrollingListRef = useRef(null);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [movieData, setMovieData] = useState({});\r\n  const deleteFromGrid = (item) => {\r\n    deleteItemFromGrid(item);\r\n  };\r\n  const handleScrollButtonOnClick = (offset) => {\r\n    const scrollByVal = scrollingListRef.current.scrollWidth >\r\n    window.innerWidth*0.7?\r\n    (window.innerWidth*offset)/100 :\r\n    (scrollingListRef.current.scrollWidth*offset)/100;\r\n    if (scrollingListRef.current) {\r\n      scrollingListRef.current.scroll(\r\n          {left: scrollingListRef.current.scrollLeft+scrollByVal,\r\n            behavior: 'smooth'});\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <ModalForm\r\n        isopen={openModal}\r\n        enableSaveButton={false}\r\n        header={'Show Movie'} toggle={()=>{\r\n          setOpenModal(!openModal);\r\n        }}>\r\n        <MovieMetaData movie={movieData}/>\r\n      </ModalForm>\r\n      <Droppable droppableId= {columnId}\r\n        direction='horizontal'>\r\n        {(provided, snapshot)=>\r\n          <Paper elevation={0}\r\n            className=\r\n              {useStyles({isDraggingOver: snapshot.isDraggingOver}).paper}\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}>\r\n            {movies.length !== 0 &&\r\n            <Button onClick={()=>handleScrollButtonOnClick(-50)}>\r\n              <ArrowBackIos/></Button>}\r\n            <ImageList\r\n              className=\r\n                {classes.imageList}\r\n              cols={100}\r\n              gap={9}\r\n              ref={scrollingListRef}\r\n            >\r\n              {movies.map((movie, index) => (\r\n                <MovieImageItem key={movie.imdbID} title={movie.Title}\r\n                  index={index}\r\n                  postersrc={movie.Poster}\r\n                  deleteItemFromGrid={deleteFromGrid}\r\n                  rating={movie.imdbRating} id={movie.imdbID}\r\n                  customClick={()=>{\r\n                    setMovieData(movie);\r\n                    setOpenModal(!openModal);\r\n                  }}/>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ImageList>\r\n            {movies.length !== 0 &&\r\n            <Button onClick={()=>handleScrollButtonOnClick(50)}>\r\n              <ArrowForwardIos/></Button>}\r\n          </Paper>\r\n        }\r\n      </Droppable>\r\n    </Grid>);\r\n}\r\n\r\nMovieList.propTypes = {\r\n  columnId: PropTypes.any,\r\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  deleteItemFromGrid: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MovieList;\r\n","export const APIKey = '15bcf215';\r\n","// *https://www.registers.service.gov.uk/registers/country/use-the-api*\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {Search} from '@material-ui/icons';\r\nimport PropTypes from 'prop-types';\r\nimport {APIKey} from '../../APIKey';\r\n\r\n/**\r\n * Reusable Search Bar component created from MUI\r\n * @param {function} callback function that returns to movie selected\r\n * @return {React.Node} Search Bar component with Movies\r\n */\r\nfunction SearchBar({movieDisplay}) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [noOptionsText, setNoOptionsText] = React.useState('No Options');\r\n  const loading = open && options.length === 0;\r\n  const handleSearchChange = async (value) => {\r\n    const response = await axios.get(`https://www.omdbapi.com/?apikey=${APIKey}&s=${value}&r=json`);\r\n    const responseData = await response.data;\r\n    const movies = responseData.Response==='True' ? (response.data?.Search) :\r\n                    [];\r\n    setOptions(movies);\r\n    if (options.length === 0) setNoOptionsText(responseData.Error);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"search-component\"\r\n      style={{width: '80%'}}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      noOptionsText={noOptionsText}\r\n      freeSolo\r\n      openOnFocus\r\n      getOptionSelected={(option, value) => option.Title === value.Title}\r\n      getOptionLabel={(option) => option.Title}\r\n      options={options}\r\n      loading={loading}\r\n      fullWidth\r\n      onChange={(event, newValue)=> {\r\n        if (options.length>0) movieDisplay(newValue);\r\n      }\r\n      }\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Search Movies\"\r\n          variant='standard'\r\n          onChange={(e)=> {\r\n            if (e.target.value !== '' || e.target.value !== null) {\r\n              handleSearchChange(e.target.value);\r\n            }\r\n          }}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> :\r\n                 null}\r\n                <Search/>\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  movieDisplay: PropTypes.func,\r\n};\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport PropTypes from 'prop-types';\r\nimport {Skeleton} from '@material-ui/lab';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: '80%',\r\n    margin: '10%',\r\n  },\r\n  media: {\r\n    maxWidth: '80%',\r\n    height: '80%',\r\n    paddingTop: '100%',\r\n    margin: '10%',\r\n    alignContent: 'center',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: 'Green',\r\n    fontSize: 15,\r\n    width: theme.spacing(5),\r\n    height: theme.spacing(5),\r\n  },\r\n}));\r\n/**\r\n * Movie Meta data display element to display the movie data in modal\r\n * @param {Array} movie object passed to render metadata\r\n * @return {ReactNode} MovieMetaData movie details display element\r\n */\r\nfunction MovieMetaDataSkeleton() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    Response?\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        title={<Skeleton/>}\r\n        subheader={<Skeleton/>}\r\n        action={ <Skeleton/>}\r\n      />\r\n      <CardMedia className={classes.media}\r\n      ><Skeleton className={classes.media}/></CardMedia>\r\n      <CardContent>\r\n        <Skeleton/>\r\n      </CardContent>\r\n      <Skeleton/>\r\n      <Skeleton/>\r\n    </Card>: <Skeleton/>\r\n  );\r\n}\r\nMovieMetaDataSkeleton.propTypes = {\r\n  movie: PropTypes.object,\r\n};\r\nexport default MovieMetaDataSkeleton;\r\n","import React, {useState} from 'react';\r\nimport SearchBar from './Reusable/MovieSearchBar';\r\nimport axios from 'axios';\r\nimport MovieMetaData from './Reusable/MovieMetaData';\r\nimport PropTypes from 'prop-types';\r\nimport MovieMetaDataSkeleton from './Reusable/CardSkeleton';\r\nimport {APIKey} from '../APIKey';\r\n/**\r\n * Renders the movie search component to be rendered in the modal form\r\n * @return {ReactNode} search component\r\n */\r\nfunction SearchComponent({sendMovieData}) {\r\n  const [movieDisplay, setMovieDisplay] = useState({});\r\n  const [fetchInProgress, setFetchInProgress] = useState(false);\r\n  const loading = JSON.stringify(movieDisplay) !== JSON.stringify({});\r\n  /**\r\n   * props callback to display movie\r\n   * @param {Object} movie\r\n   */\r\n  async function setMovie(movie) {\r\n    setFetchInProgress(true);\r\n    setMovieDisplay({});\r\n    const response = await axios.get(`https://www.omdbapi.com/?apikey=${APIKey}&i=${movie.imdbID}&r=json`);\r\n    const movies = await response.data;\r\n    setFetchInProgress(false);\r\n    if (movies.Response === 'True') sendMovieData(response.data);\r\n    setMovieDisplay(movies);\r\n  }\r\n  /**\r\n     * render Render a React element into the DOM in the supplied\r\n     * container and return a reference to the component\r\n     * (in this case the search component)\r\n     * @return {ReactNode} search component to be rendered on the modal form\r\n     */\r\n  return (<>\r\n    <SearchBar movieDisplay={setMovie}/>\r\n    {loading ?\r\n    <MovieMetaData movie={movieDisplay}/>:fetchInProgress?\r\n    <MovieMetaDataSkeleton/>:<></>}\r\n  </>);\r\n}\r\n\r\nSearchComponent.propTypes = {\r\n  sendMovieData: PropTypes.func,\r\n};\r\nexport default SearchComponent;\r\n","\r\nimport React from 'react';\r\nimport {ResponsiveBar} from '@nivo/bar';\r\nimport PropTypes from 'prop-types';\r\nimport {useState, useEffect} from 'react';\r\n\r\n/**\r\n * Bar Graph comparing movies based on IMDb Rating\r\n * @param {Array} data array of the movies compared in graphical form\r\n * @return {ReactNode} Graph Component comparing movies based on IMDb Rating\r\n */\r\nconst MovieBarGraph = ({data: movies, isLargeScreen, customClick}) => {\r\n  const [ratings, setRatings] = useState([]);\r\n  const keys = ['imdbRating'];\r\n  useEffect(()=>{\r\n    const imdbValues = movies?.map((el)=>\r\n      ({...{'imdbRating': isNaN(el.imdbRating*1) ? 0:el.imdbRating*1,\r\n        'Metascore': isNaN(el.Metascore/10)? 0: el.Metascore/10,\r\n        'Title': el.Title, 'Poster': el.Poster}, ...el}\r\n      ));\r\n    setRatings(imdbValues);\r\n  }, [movies]);\r\n  return (movies?.length>0?\r\n  <>\r\n    <ResponsiveBar\r\n      data={ratings}\r\n      keys={keys}\r\n      indexBy={['Title']}\r\n      groupMode='grouped'\r\n      colorBy={'id'}\r\n      colors={{scheme: 'pastel2'}}\r\n      initialHiddenIds={keys.slice(1)}\r\n      theme={{fontSize: 15, axis: {legend: {\r\n        text: {\r\n          fontSize: 20,\r\n          fontWeight: 300,\r\n        },\r\n      },\r\n      domain: {\r\n        line: {\r\n          strokeWidth: 20,\r\n          stroke: 10,\r\n        },\r\n      },\r\n      }}}\r\n      layout={'horizontal'}\r\n      enableGridX\r\n      enableGridY={false}\r\n      enableLabel={isLargeScreen}\r\n      minValue={0}\r\n      maxValue={10}\r\n      borderRadius={4}\r\n      label={(d) => `${d.id}: ${d.value}`}\r\n      labelSkipHeight={0}\r\n      padding={0.5}\r\n      margin= {{top: 60, right: 200, bottom: 60, left: 150}}\r\n      axisBottom={{\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        legend: 'Rating',\r\n        legendPosition: 'middle',\r\n        legendOffset: 45,\r\n      }}\r\n      legendLabel={(datum) => `${datum.id}`}\r\n      axisLeft={{\r\n        tickSize: 5,\r\n        tickPadding: 10,\r\n        tickRotation: 0,\r\n        legendPosition: 'middle',\r\n        legendOffset: -120,\r\n        legend: 'Movie / TV Show',\r\n        format: (value)=>{\r\n          const acronym = value.split(/\\s/)\r\n              .reduce((response, word)=> response+=word.slice(0, 1), '');\r\n          return acronym ? acronym: value;\r\n        },\r\n      }}\r\n      onClick={({data})=>{\r\n        customClick(data);\r\n      }}\r\n      legends={[\r\n        {\r\n          anchor: 'right',\r\n          direction: 'column',\r\n          dataFrom: 'keys',\r\n          itemHeight: 20,\r\n          itemWidth: 80,\r\n          translateY: 90,\r\n          translateX: 100,\r\n          symbolShape: CustomSymbolShape,\r\n        },\r\n      ]}\r\n      tooltip={({id, value, data, color}) => (\r\n        <div\r\n          style={{\r\n            padding: 6,\r\n            color,\r\n            background: '#222222',\r\n          }}\r\n        >\r\n          <img src={data?.Poster} alt={data?.Title} width='30%' height='30%'/>\r\n          <br />\r\n          <strong>\r\n            {data?.Title}<br/>\r\n            {id}: {value}\r\n          </strong>\r\n        </div>\r\n      )}\r\n    /></>:<></>\r\n  );\r\n};\r\n\r\n\r\nMovieBarGraph.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.object),\r\n  isLargeScreen: PropTypes.bool.isRequired,\r\n  customClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MovieBarGraph;\r\n\r\nconst CustomSymbolShape = ({\r\n  x, y, size, fill, borderWidth, borderColor,\r\n}) => (\r\n  <rect\r\n    x={x}\r\n    y={y}\r\n    fill={fill}\r\n    strokeWidth={borderWidth}\r\n    stroke={borderColor}\r\n    width={size}\r\n    height={size}\r\n    style={{pointerEvents: 'none'}}\r\n  />\r\n);\r\n\r\nCustomSymbolShape.propTypes = {\r\n  x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  fill: PropTypes.string,\r\n  borderWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  borderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport {Rating} from '@material-ui/lab';\r\nimport {CloseOutlined} from '@material-ui/icons';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport {Hidden} from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: theme.spacing(2),\r\n  },\r\n  img: {\r\n    margin: 'auto',\r\n    display: 'block',\r\n    maxWidth: '100%',\r\n  },\r\n  closeButton: {\r\n    marginTop: -theme.spacing(2),\r\n    marginRight: '-100%',\r\n    zIndex: 100,\r\n    maxWidth: '30px',\r\n    maxHeight: '30px',\r\n  },\r\n}));\r\n\r\n/**\r\n * Returns list item of movie object for scrollable list\r\n * @param {Object} props {title, postersrc, children, rating, id, index,\r\n *   deleteItemFromGrid}\r\n * @param {string} props.title Movie title\r\n * @param {string} props.postersrc url of the src of the poster of the movie\r\n * @param {JSXElement} props.children children to the movie component\r\n * @param {string/number} props.rating rating of the movie\r\n * @param {string/number} props.id imdb id of the movie to uniquely identify it\r\n * @param {any} props.index unique index of the item in the dragdropcontext\r\n * @param {function} props.deleteItemFromGrid callback to delete the item from\r\n * the list grid\r\n * @return {ReactNode} ScrollList Component that allows\r\n * list of children to be scrollable.\r\n */\r\nfunction MovieCard({title, postersrc, children, rating, id, index,\r\n  deleteItemFromGrid, customClick}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {(provided)=>(<Paper className={classes.paper}\r\n        {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n        innerRef={provided.innerRef}\r\n        onClick={customClick}>\r\n        <CloseOutlined className={classes.closeButton}\r\n          onClick={()=>deleteItemFromGrid(id)}/>\r\n        <Grid container spacing={2}>\r\n          <Hidden smDown>\r\n            <Grid item xs={1} sm={3} md={3} lg={3} xl={3}>\r\n              <ButtonBase className={classes.image}>\r\n                <img className={classes.img} alt=\"complex\" src={postersrc}/>\r\n              </ButtonBase>\r\n            </Grid>\r\n          </Hidden>\r\n          <Hidden xlUp smDown>\r\n            <Grid item sm={8}>\r\n              <Typography gutterBottom variant=\"subtitle1\">\r\n                {title}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                <Rating value={rating/2} precision={0.1} size='small'\r\n                  readOnly/>\r\n              </Typography>\r\n            </Grid>\r\n          </Hidden>\r\n          <Hidden lgDown>\r\n            <Grid item xl={9} container>\r\n              <Grid item xs container direction=\"column\" spacing={2}>\r\n                <Grid item xs>\r\n                  <Typography gutterBottom variant=\"subtitle1\">\r\n                    {title}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" gutterBottom>\r\n                    <Rating value={rating/2} precision={0.1} size='small'\r\n                      readOnly/>\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {children}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Hidden>\r\n        </Grid>\r\n      </Paper>)}\r\n    </Draggable>\r\n  );\r\n}\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  postersrc: PropTypes.any.isRequired,\r\n  children: PropTypes.any.isRequired,\r\n  rating: PropTypes.string.isRequired,\r\n  id: PropTypes.any.isRequired,\r\n  index: PropTypes.any.isRequired,\r\n  deleteItemFromGrid: PropTypes.func.isRequired,\r\n  customClick: PropTypes.func.isRequired,\r\n};\r\nexport default MovieCard;\r\n","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\nimport {Chip} from '@material-ui/core';\r\n\r\n/**\r\n * Returns list item of movie object in a MUI chip shape for scrollable list\r\n * @param {Object} props {title, id, deleteItem, index}\r\n * @param {string} props.title Movie title\r\n * @param {string/number} props.id imdb id of the movie to uniquely identify it\r\n * @param {function} props.deleteItemFromGrid callback to delete the item from\r\n * the list grid\r\n * @param {any} props.index unique index of the item in the dragdropcontext\r\n * @return {ReactNode} Card component with the data provided in props\r\n */\r\nfunction MovieChip({title, id, deleteItem, index, customClick}) {\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {(provided, snapshot)=>(\r\n        <Chip {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          innerRef={provided.innerRef} label={title}\r\n          onDelete={()=>{\r\n            deleteItem(id);\r\n          }}\r\n          clickable\r\n          onClick={customClick}/>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nMovieChip.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  id: PropTypes.any.isRequired,\r\n  index: PropTypes.any.isRequired,\r\n  deleteItem: PropTypes.func.isRequired,\r\n  customClick: PropTypes.func.isRequired,\r\n};\r\nexport default MovieChip;\r\n","\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Droppable} from 'react-beautiful-dnd';\r\nimport {Container, Grid, List, Paper} from '@material-ui/core';\r\nimport MovieBarGraph from './Reusable/BarGraph';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport MovieCard from './Reusable/MovieDetailsCard';\r\nimport MovieChip from './Reusable/MovieChip';\r\nimport ModalForm from './Reusable/ModalForm';\r\nimport MovieMetaData from './Reusable/MovieMetaData';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  list: {\r\n    display: 'inline-block',\r\n    overflow: 'auto',\r\n    justifyContent: 'center',\r\n    width: '70vw',\r\n    padding: '2vw',\r\n    zIndex: 10,\r\n  },\r\n  paper: {\r\n    backgroundColor: (props) => props.isDraggingOver? 'lightgrey': '#f8f9fa',\r\n    width: '100vw',\r\n    justifyContent: 'center',\r\n    display: (props) => props.isDesktop? 'flex':'block',\r\n    padding: 20,\r\n    height: '60vh',\r\n    borderRadius: 8,\r\n    margin: '1vw',\r\n  },\r\n  listPaper: {\r\n    overflow: 'scroll',\r\n    borderRadius: 8,\r\n    padding: 10,\r\n    width: '40vw',\r\n  },\r\n}));\r\n/**\r\n * Renders movies which are being compared and the comparision graph\r\n * @param {Object} props {deleteItemFromGrid, movies}\r\n * @param {function} props.deleteItemFromGrid:callback to delete movie from grid\r\n * @param {Array} props.movie array of the movie objects to be rendered in grid\r\n * @return {ReactNode} returns movie grid component\r\n */\r\nfunction MovieGrid({deleteItemFromGrid, movies}) {\r\n  const [isDesktop, setDesktop] = useState(window.innerWidth > 1450);\r\n  const [displayMovie, setDisplayMovie] = useState({});\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const updateMedia = () => {\r\n    setDesktop(window.innerWidth > 1450);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateMedia);\r\n    return () => window.removeEventListener('resize', updateMedia);\r\n  });\r\n  const classes = useStyles();\r\n  const deleteItem =(itemId) =>{\r\n    deleteItemFromGrid(itemId);\r\n  };\r\n  const showMovie = (movieData) =>{\r\n    setDisplayMovie(movieData);\r\n    setOpenModal(!openModal);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container justifyContent=\"center\">\r\n        <ModalForm\r\n          isopen={openModal}\r\n          enableSaveButton={false}\r\n          header={'Show Movie'} toggle={()=>{\r\n            setOpenModal(!openModal);\r\n          }}>\r\n          <MovieMetaData movie={displayMovie}/>\r\n        </ModalForm>\r\n        <Droppable droppableId= {'movies-grid'}\r\n          direction='horizontal'>\r\n          {(provided, snapshot)=>\r\n            <Paper elevation={0}\r\n              className=\r\n                {useStyles({isDraggingOver: snapshot.isDraggingOver,\r\n                  isDesktop: isDesktop}).paper}\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}>\r\n              {movies?.length? isDesktop?\r\n              <Paper elevation={10} className={classes.listPaper}>\r\n                <List>\r\n                  {movies?.map((movie, index) =>\r\n                    <MovieCard key={movie.imdbID} title={movie.Title}\r\n                      index={index}\r\n                      postersrc={movie.Poster}\r\n                      deleteItemFromGrid={deleteItem}\r\n                      rating={movie.imdbRating} id={movie.imdbID}\r\n                      customClick={()=>showMovie(movie)}>\r\n                      {movie.Plot}</MovieCard>)}\r\n                </List>\r\n              </Paper>:<List className={classes.list}>\r\n                {movies?.map((movie, index) =>\r\n                  <MovieChip key={movie.imdbID} title={movie.Title}\r\n                    index={index}\r\n                    deleteItem={deleteItem} id={movie.imdbID}\r\n                    customClick={()=>showMovie(movie)}/>)}\r\n              </List>:<></>}\r\n              <br/>\r\n              <Container style={{height: '45vh'}}>\r\n                <MovieBarGraph data={movies} isLargeScreen={isDesktop}\r\n                  customClick={showMovie}/>\r\n              </Container>\r\n              <br/>\r\n              {provided.placeholder}\r\n            </Paper>\r\n          }\r\n        </Droppable>\r\n      </Grid>\r\n    </>);\r\n}\r\n\r\nMovieGrid.propTypes = {\r\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  deleteItemFromGrid: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MovieGrid;\r\n","import React, {Component} from 'react';\r\nimport Button from '../Components/Reusable/Button';\r\nimport ModalForm from '../Components/Reusable/ModalForm';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport {DragDropContext} from 'react-beautiful-dnd';\r\nimport MovieList from '../Components/MovieList';\r\nimport SearchComponent from '../Components/Search';\r\nimport MovieGrid from '../Components/MovieGrid';\r\nimport {Grid, IconButton, Snackbar} from '@material-ui/core';\r\nimport {CloseOutlined} from '@material-ui/icons';\r\n\r\n/**\r\n * Movie Page component\r\n */\r\nclass MoviePage extends Component {\r\n  /**\r\n     * method used to initialize an object's state in a class.\r\n     * @param {any} props passed to the component\r\n     */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openModal: false,\r\n      movies: [],\r\n      movieData: {},\r\n      errorMsg: '',\r\n      showError: false,\r\n      columns: {\r\n        'movies-list': {\r\n          id: 'movies-list',\r\n          title: 'Movies',\r\n          movies: [],\r\n        },\r\n        'movies-grid': {\r\n          id: 'movies-grid',\r\n          title: 'Movies',\r\n          movies: [],\r\n        },\r\n      },\r\n      columnOrder: ['movies-grid', 'movies-list'],\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n    this.onAddClick = this.onAddClick.bind(this);\r\n    this.onSaveClick = this.onSaveClick.bind(this);\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n    this.receiveMovieData = this.receiveMovieData.bind(this);\r\n    this.deleteFromGrid = this.deleteFromGrid.bind(this);\r\n    this.deleteFromList = this.deleteFromList.bind(this);\r\n  }\r\n  /**\r\n   * deletes item from grid/graph component\r\n   * @param {string} itemId the item that needs to be deleted\r\n   */\r\n  deleteFromGrid(itemId) {\r\n    const movies = this.state.movies;\r\n    const colMovies = this.state.columns['movies-grid'].movies;\r\n    const newState = {\r\n      ...this.state,\r\n      movies: movies.filter((el)=> el.imdbID !== itemId),\r\n      columns: {\r\n        ...this.state.columns,\r\n        'movies-grid': {...this.state.columns['movies-grid'],\r\n          movies: colMovies.filter((el)=> el !== itemId)}\r\n        ,\r\n      },\r\n    };\r\n    this.setState(newState);\r\n  }\r\n\r\n  /**\r\n   * deletes item from list component\r\n   * @param {string} itemId the item that needs to be deleted\r\n   */\r\n  deleteFromList(itemId) {\r\n    const movies = this.state.movies;\r\n    const colMovies = this.state.columns['movies-list'].movies;\r\n    const newState = {\r\n      ...this.state,\r\n      movies: movies.filter((el)=> el.imdbID !== itemId),\r\n      columns: {\r\n        ...this.state.columns,\r\n        'movies-list': {...this.state.columns['movies-list'],\r\n          movies: colMovies.filter((el)=> el !== itemId)}\r\n        ,\r\n      },\r\n    };\r\n    this.setState(newState);\r\n  }\r\n  /**\r\n   * Opens the modal box to add the movie\r\n   */\r\n  onAddClick() {\r\n    this.setState((prevstate)=>\r\n      ({...prevstate, openModal: !prevstate.openModal}));\r\n  }\r\n\r\n  /**\r\n   * Function to toggle(open/close) the modal form\r\n   */\r\n  toggle() {\r\n    this.setState((prevState) =>\r\n      ({...prevState, openModal: !prevState.openModal, movieData: {},\r\n        errorMsg: '',\r\n        showError: false}));\r\n  }\r\n  /**\r\n * Function to be triggered on trying adding the movie to the grid\r\n */\r\n  onSaveClick() {\r\n    const moviesData = this.state.movieData;\r\n    if (JSON.stringify(moviesData) === JSON.stringify({})) {\r\n      this.setState({...this.state,\r\n        errorMsg: 'Please select a movie',\r\n        showError: true});\r\n      return;\r\n    }\r\n    if (this.state.movies\r\n        .findIndex((el)=> moviesData?.imdbID === el.imdbID) >= 0) {\r\n      this.setState({...this.state,\r\n        errorMsg: 'This movie already exists in the comparitive list.',\r\n        showError: true});\r\n      return;\r\n    }\r\n    if (moviesData?.imdbRating === 'N/A') {\r\n      this.setState({...this.state,\r\n        errorMsg: 'There is no comparable rating on this movie.',\r\n        showError: true}); return;\r\n    };\r\n    const newState = {\r\n      ...this.state,\r\n      movies: [...this.state.movies, moviesData],\r\n      columns: {\r\n        ...this.state.columns,\r\n        'movies-list': {...this.state.columns['movies-list'],\r\n          movies: [...this.state.columns['movies-list'].movies,\r\n            moviesData?.imdbID]}\r\n        ,\r\n      },\r\n    };\r\n    this.setState(newState);\r\n    this.toggle();\r\n  }\r\n  /**\r\n  * Operation to be performed on dropping the object\r\n  * @param {Object} result is the result object that is given on dragging\r\n  * and dropping\r\n  */\r\n  onDragEnd(result) {\r\n    const {destination, source, draggableId} = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newMovies = Array.from(start.movies);\r\n      newMovies.splice(source.index, 1);\r\n      newMovies.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        movies: newMovies,\r\n      };\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newColumn.id]: newColumn,\r\n        },\r\n      };\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Moving movie object from one grid to list or vice-versa\r\n    */\r\n    const startMovies = Array.from(start.movies);\r\n    startMovies.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      movies: startMovies,\r\n    };\r\n\r\n    const finishMovies = Array.from(finish.movies);\r\n    finishMovies.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      movies: finishMovies,\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish,\r\n      },\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  /**\r\n   * Callback function which is passed down to the child to\r\n   * receive the data of the movie added\r\n   * @param {Object} data movie object passed while trying to add the movie\r\n   */\r\n  receiveMovieData(data) {\r\n    this.setState((prevState)=>({...prevState, errorMsg: '',\r\n      showError: false, movieData: data}));\r\n  }\r\n  /**\r\n     * render Render a React element into the DOM in the supplied\r\n     * container and return a reference to the component\r\n     * (in this case the movie page)\r\n     * @return {ReactNode} Movie Page Component containing the\r\n     * comparison region and list of movies\r\n     */\r\n  render() {\r\n    return (<>\r\n      <DragDropContext\r\n        onDragEnd = {this.onDragEnd}\r\n      >\r\n        <Grid>\r\n          <ModalForm enableSaveButton isopen={this.state.openModal}\r\n            header={'Search Movie'} toggle={this.toggle}\r\n            savefunc={this.onSaveClick}\r\n            SaveButton={'Add Movie'}>\r\n            <Snackbar open={this.state.showError} autoHideDuration={5000}\r\n              message={this.state.errorMsg}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n              onClose={()=>{\r\n                this.setState((prevState)=> ({...prevState, showError: false}));\r\n              }}\r\n              action={\r\n                <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\"\r\n                  onClick={()=>{\r\n                    this.setState((prevState)=>\r\n                      ({...prevState, showError: false}));\r\n                  }}>\r\n                  <CloseOutlined fontSize=\"small\" />\r\n                </IconButton>}\r\n            />\r\n            <SearchComponent sendMovieData= {this.receiveMovieData}/>\r\n          </ModalForm>\r\n          <h1>Movie Comparer</h1>\r\n          {this.state.columnOrder.map((columnId) => {\r\n            const column = this.state.columns[columnId];\r\n            const movies = column.movies.map((movie) =>\r\n              this.state.movies.find((el) => el.imdbID === movie));\r\n\r\n            return <div key={column.id}>{columnId==='movies-list'?\r\n          <MovieList movies={movies}\r\n            deleteItemFromGrid={this.deleteFromList}\r\n            columnId={column.id}/>:\r\n         <><MovieGrid movies={movies} deleteItemFromGrid={this.deleteFromGrid}/>\r\n           <Button text={'Add Movie'} startIcon={<AddCircleOutlineIcon/>}\r\n             size='large' color='default'\r\n             variant='outlined' onClick={()=>{\r\n               this.onAddClick();\r\n             }}/></>}<br/></div>;\r\n          })}\r\n        </Grid>\r\n      </DragDropContext>\r\n    </>);\r\n  }\r\n}\r\n\r\nexport default MoviePage;\r\n","import {Grid, Paper} from '@material-ui/core';\r\nimport {Alert} from '@material-ui/lab';\r\nimport React from 'react';\r\n/**\r\n * Returns errors\r\n * @param {props} props {error} error passed to the handler\r\n * @return {ReactNode} Error Handler\r\n */\r\nexport function errorBoundaryHandler({error}) {\r\n  const errorMsg = `The page did not load correctly: ${error.message}.`;\r\n  return <Grid xs={9} style={{padding: '12.5vw'}}>\r\n    <Alert severity={'error'}><h4> Something Went Wrong </h4></Alert><br/>\r\n    <Paper elevation={10}>\r\n      {errorMsg}<br/>\r\n      Call Stack: <br/>\r\n      {error.stack}\r\n    </Paper>\r\n  </Grid>;\r\n}\r\n\r\nexport default errorBoundaryHandler;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {ErrorBoundary} from 'react-error-boundary';\r\nimport MoviePage from './Pages/MovieComparePage';\r\nimport errorBoundaryHandler from './Components/errorBoundaryHandler';\r\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\r\n\r\n/**\r\n * SPA application root for an application that compares movies by graphing the\r\n * IMDb rating of films. The page is divided into 2 parts + Search functionality\r\n * 1. Movie Grid which contains the graphing region for visual comparision of\r\n * the movies\r\n * 2. Movie List that contain the list of movies we can add to the comparison\r\n * After searching for a movie, the user will be able to view\r\n * the metadata in the movie details section in the wireframe\r\n * @return {ReactNode} App component rendered from the root\r\n */\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary FallbackComponent={errorBoundaryHandler}>\r\n      <div className=\"App\">\r\n        <AppBar position='sticky'><Toolbar>\r\n          <Typography variant=\"h6\">\r\n            Movie Comparer\r\n          </Typography>\r\n        </Toolbar></AppBar>\r\n        <MoviePage/>\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}